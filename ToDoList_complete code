# import all required methods & classes from modules sqlalchemy, datetime
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Date
from datetime import datetime, date, timedelta
from sqlalchemy.orm import sessionmaker

# create engine to connect to todo.db database
engine = create_engine('sqlite:///todo.db?check_same_thread=False')

# initialize Base class instance
Base = declarative_base()


# create class Table for tables
class Table(Base):
    __tablename__ = 'task'
    id = Column(Integer, primary_key=True)
    task = Column(String, default='default_value')
    deadline = Column(Date, default=datetime.today())

    def __repr__(self):
        return self.string_field


# create table 'task' - Table class instance - in todo.db database
Base.metadata.create_all(engine)

# create session to access the database
Session = sessionmaker(bind=engine)
session = Session()


# Write your code here
class ToDoList:
    def __init__(self):
        while True:
            # output user interface
            print('1) Today\'s tasks\n'
                  '2) Week\'s tasks\n'
                  '3) All tasks\n'
                  '4) Missed tasks\n'
                  '5) Add task\n'
                  '6) Delete task\n'
                  '0) Exit'
                  )
            # process input from user
            user_choice = input()
            # break program execution if user chose to
            if user_choice == '0':
                break
            # output tasks for today if user chose to
            if user_choice == '1':
                print(ToDoList.retrieve_tasks_for_the_day(self, requested_duration=1))
            # output tasks for the week if user chose to
            if user_choice == '2':
                print(ToDoList.retrieve_tasks_for_the_day(self, requested_duration=7))
            # output all tasks if user chose to
            if user_choice == '3':
                print(ToDoList.retrieve_all_tasks(self))
            # output missed tasks
            if user_choice == '4':
                print(ToDoList.retrieve_missed_tasks(self))
            # add new task to the database if user chose to
            if user_choice == '5':
                ToDoList.add_task(self)
            # delete task
            if user_choice == '6':
                ToDoList.delete_task(self)

    def add_task(self):
        # take input from user - task and its deadline
        task = input('\nEnter task\n')
        deadline = input('Enter deadline\n')
        new_task = Table(task=task, deadline=datetime.strptime(deadline, '%Y-%m-%d'))
        # add new row to the database
        session.add(new_task)
        # save changes to the database
        session.commit()
        # output status message
        print('The task has been added!\n')

    def delete_task(self):
        # retrieve all tasks and propose user to choose with task to delete
        print('\nChoose the number of the task you want to delete:', ToDoList.retrieve_all_tasks(self, for_deletion=True), sep='\n')
        # take input from user
        delete_id = int(input())
        # initialize query to get all tasks from 'task' table
        tasks = session.query(Table).order_by(Table.deadline).all()
        # specify task to be deleted and delete it
        session.delete(tasks[delete_id - 1])
        # save changes to 'task' table and output deletion message
        session.commit()
        print('The task has been deleted!\n')

    def retrieve_all_tasks(self, for_deletion=False):
        # initialize output message
        output_message = f'All tasks:\n' if not for_deletion else str()
        # retrieve tasks' records from the table in todo.db ordered by date
        tasks = session.query(Table).order_by(Table.deadline).all()
        # initialize list with all tasks retrieved from 'tasks' table
        all_tasks = \
            [
                f'{i + 1}. {tasks[i].task}. {tasks[i].deadline.day} {tasks[i].deadline.strftime("%b")}'
                for i in range(len(tasks))
            ]
        # update output message
        if len(all_tasks) == 0 and not for_deletion:
            output_message += 'Nothing to do!'
        else:
            output_message += "\n".join(all_tasks)
        return f'\n{output_message}\n' if not for_deletion else output_message

    # script for getting tasks for the day
    def retrieve_tasks_for_the_day(self, requested_duration=1):
        # initialize final output message of the script
        final_output_message = list()
        # loop through days of requested duration and get tasks for each day
        for i in range(requested_duration):
            # initialize output message for current day
            output_message = str()
            # initialize date for tasks output
            tasks_date = date.today() + timedelta(days=i)
            # initialize output message for today's tasks
            output_message += \
                f'{tasks_date.strftime("%A") if requested_duration != 1 else "Today"} ' \
                f'{str(tasks_date.day)} ' \
                f'{tasks_date.strftime("%b")}:\n'
            # retrieve all tasks from database
            tasks = session.query(Table).filter(Table.deadline == tasks_date).all()
            # initialize output list
            day_tasks = [f'{j + 1}. {tasks[j].task}' for j in range(len(tasks)) if tasks[j].deadline == tasks_date]
            # update output message
            if len(day_tasks) == 0:
                output_message += 'Nothing to do!'
            else:
                output_message += "\n".join(day_tasks)
            # append tasks for current day to final_output_message list
            final_output_message.append(output_message)
            # output list of tasks for today
        return '\n{}\n'.format("\n\n".join(final_output_message))

    # script for retrieving missed tasks
    def retrieve_missed_tasks(self):
        # initialize output message
        output_message = f'Missed tasks:\n'
        # retrieve tasks' records from the table in todo.db ordered by date
        tasks = session.query(Table).filter(Table.deadline < date.today()).order_by(Table.deadline).all()
        # initialize list with all tasks retrieved from 'tasks' table
        missed_tasks = \
            [
                f'{i + 1}. {tasks[i].task}. {tasks[i].deadline.day} {tasks[i].deadline.strftime("%b")}'
                for i in range(len(tasks))
            ]
        # update output message
        if len(missed_tasks) == 0:
            output_message += 'Nothing is missed!'
        else:
            output_message += "\n".join(missed_tasks)
        return f'\n{output_message}\n'


# run script
if __name__ == '__main__':
    # create instance of ToDoList class
    todolist = ToDoList()
